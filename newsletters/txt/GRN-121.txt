----------------------------------------------------
Green Ruby News #121 - may 31th 2015
----------------------------------------------------
*|IFNOT:CONTENT=Only Rant|*

Look
----------------------------------------------------
Examples of UI/UX, graphic performance, web design and flashy things.

*Your time 4* (design)
http://yourtime4.com/
Neat and simple horizontal page scrolling, and cool design.

Use
----------------------------------------------------
Web applications, resources and tools, available for making our life easier or funnier.

*libgrader* (rb)
http://www.libgrader.com/
Find quality gems for your next project.

*Rails meets React* (rb)
http://blog.arkency.com/rails-react/
(book) still under progress, but already accessible.

*PackageCloud* (ops)
https://packagecloud.io/
Public and private package repositories with powerful tooling, security and automation.

*CloudSlang* (ops)
http://www.cloudslang.io/
Automate your DevOps use cases using ready-made workflows.

*Linux performance* (ops)
http://www.brendangregg.com/linuxperf.html
Very neat gathering of tools for deep Linux observability.

*Devbattles* (web)
http://www.devbattles.com/
IT community for professionals.

Install
----------------------------------------------------
A selection of gems or applications updated during past week.

*Spina* (rb)
https://github.com/denkGroot/Spina
A CMS built upon the Rails framework.

*Waterfall* (rb)
https://github.com/apneadiving/waterfall
A tool to chain ruby services and blocks.

*acts_as_localized* (rb)
https://github.com/GBH/acts_as_localized
Localization accessor mechanism for AR models.

*Polymer 1.0* (js)
https://www.polymer-project.org/1.0/
Announced at Google IO, here is the first major release of this web component framework.

*Leasot* (js)
https://github.com/pgilad/leasot
Parse and output TODOs and FIXMEs from comments in your files.

*Passenger 5.0.8* (ops)
https://blog.phusion.nl/2015/05/20/phusion-passenger-5-0-8-new-debian-packages-red-hat-packages-bug-fixes/
New Debian packages, Red Hat packages, bug fixes.

*Gitlab 7.11* (ops)
https://about.gitlab.com/2015/05/22/gitlab-7-11-released/
Two-factor Authentication, look and feel upgrade, and more.

Read
----------------------------------------------------
From the blogosphere or news feeds ...

*Remote Control Your Mac With Node.js and Arduino* (js - may 25)
http://www.sitepoint.com/remote-control-mac-node-js-arduino/
Not really remote, more like an external keypad.

*Implementing 'the lovely' Singleton Pattern* (rb - may 26)
http://rubylogs.com/singleton-pattern/
The good part of singleton.

*Boldly refactoring complex code* (rb - may 26)
http://engineering.vinted.com/2015/05/26/boldly-refactoring-complex-code/
By using github's scientist gem.

*Recursion in Ruby* (rb - may 26)
http://www.leighhalliday.com/recursion-in-ruby
Exemple of adding a head_tail method to array to ease up recursion.

*Rails Quick Tips: Easy ActiveRecord Optimizations* (rb - may 27)
http://hashrocket.com/blog/posts/rails-quick-tips-easy-activerecord-optimizations
Use select, any?, empty?, and pluck to boost the query performance.

*How to delegate methods in Ruby* (rb - may 27)
https://medium.com/@KamilLelonek/how-to-delegate-methods-in-ruby-a7a71b077d99
5 ways of forwarding your work to some other object in Ruby.

*Orchestrate Containers for Development with Docker Compose* (tool - may 27)
http://blog.codeship.com/orchestrate-containers-for-development-with-docker-compose/
It was known as Fig, now it's docker-compose.

*Build Custom User Analytics with Parse* (rb - may 28)
http://www.sitepoint.com/build-custom-user-analytics-parse/
Parse is an IaaS from Facebook with a large free tier.

*Ruby’s Exception vs StandardError: What’s the difference?* (rb - may 29)
http://blog.honeybadger.io/ruby-exception-vs-standarderror-whats-the-difference
Why you should never rescue Exception in ruby.

*CoffeeScript classes with React - pros and cons* (js - may 31)
http://blog.arkency.com/2015/05/you-can-use-coffeescript-classes-with-react-dot-js-pros-and-cons/
You can use CoffeeScript classes to create React components (since 0.12).

Watch
----------------------------------------------------
Screencasts and conferences videos, or other video feeds ...

*RubyTapas Freebie: Sequel* (rb - may 26 - 5m)
http://devblog.avdi.org/2015/05/26/rubytapas-freebie-sequel/
The good part of sequel gem.

*Docker Swarm* (ops - may 27 - 23m)
http://blog.docker.com/2015/05/docker-tutorial-11-docker-swarm/
11th of the Docket Tutorial collectiopn.

. . . . . . . . . . . . . . . . . . . . . . . . . .
Links curated by by mose (publisher), xenor, tysliu (editors).
*|END:IF|*
*|IFNOT:CONTENT=Only Links|*

Rant
----------------------------------------------------
The random rant of the week by mose.

#### linux trick: too many logs

Recently I found my self again in that situation on a linux server. The
partition where logs are stored went 100%. In such case, It's clever top purge
old useless logfiles. Typical move for me would be to run logrotate manually
with

<pre> logrotate -f /etc/logrotate.conf </pre>

But I had a case where that was not enough. A developer forgot to remove a
debugging output and the logs were just gathering way too much information,
more than what I could free with some janitoring.

To avoid losing logs, we can move the logfile where there is space and replace
the file with a symbolic link. That's good enough for until the partition gets
resized of the logs get cleaned. But when it's done on a live logfile, the
running process that writes into it still has the same file descriptor. The
process has to be relaunched so the new fd can be taken in account, on the new
partition, as instructed by the symbolic link.

So a colleague pointed out that could be done without restart by using gdb.
It's a pretty neat trick (if you have gdb installed on your production server,
which may not always be the case, and for good reasons). Anyways I had it at
hand, and here is the sequence:

<pre> touch /path/to/new/logfile

gdb -p pid

(gdb) call dup(1)
$1 = 3
(gdb) call close(1)
$2 = 0
(gdb) call open("/path/to/new/logfile", 2)
$3 = 1
(gdb) call close($1)
$4 = 0
(gdb) </pre>

This gave me the taste of digging up a little bit more on how gdb can interact
with live processes.

*|END:IF|*

====================================================
EOF

Feel free to send us feedback or information at
news@greenruby.org

follow on Twitter @greenrubist
forward to a friend *|FORWARD|*
Subscribe *|LIST:SUBSCRIBE|*

Copyright (c) *|CURRENT_YEAR|* Mose
http://creativecommons.org/licenses/by-sa/3.0/
This publication is licensed under a
Creative Commons Attribution-ShareAlike 3.0 License




