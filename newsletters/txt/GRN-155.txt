----------------------------------------------------
Green Ruby News #155 - jan 24th 2016
----------------------------------------------------
*|IFNOT:CONTENT=Only Rant|*

Look
----------------------------------------------------
Examples of UI/UX, graphic performance, web design and flashy things.

*Joho's* (design)
http://johos.at/
Full-page video and audacious navigation.

*2015 year in review* (design)
http://yearinreview.co/
A Collection of 2015 Year in Review pages from around the world.

Use
----------------------------------------------------
Web applications, resources and tools, available for making our life easier or funnier.

*Ruby on Rails: Doctrine* (rb)
http://rubyonrails.org/doctrine/
Renewed Rails Manifesto by DHH.

*ES6-cheatsheet* (js)
https://github.com/DrkSephy/es6-cheatsheet
Cheatsheet containing tips, tricks, best practices and code snippets.

*AirBNB JavaScript Style Guide* (js)
https://github.com/irfan/javascript
The AirBNB JavaScript Style Guide

*CssFilters* (css3)
http://www.cssFilters.co
Custom and Instagram like photo filters for CSS.

Install
----------------------------------------------------
A selection of gems or applications updated during past week.

*Icersplicer* (rb)
https://github.com/puppetpies/icersplicer
Manipulate text files with Ruby.

*Solidus* (rb)
https://github.com/solidusio/solidus
Rails eCommerce System.

*It_sorts* (rb)
https://github.com/Masa331/it_sorts
Tiny helper lib for understandable array sorting.

*Chaltron* (rb)
https://github.com/vicvega/chaltron
Template generator for rails 4 application with bootstrap, devise...

*devise_invitations* (rb)
https://github.com/RoxasShadow/devise_invitations
Allow multiple invitations on top of devise_invitable.

*torba* (rb)
https://github.com/torba-rb/torba
Bundler for Sprockets.

*Apex* (go)
https://github.com/apex/apex
Minimal AWS Lambda function manager with Go support.

*Kiex* (el)
http://taylor.github.io/kiex/
Like rvm, but for elixir.

*Objection.js* (js)
https://github.com/Vincit/objection.js
An SQL-friendly ORM for Node.js

*Validator.js* (js)
https://github.com/chriso/validator.js
String validation and sanitization.

*Timelined* (css3)
https://github.com/andriussev/timelined
A customizable CSS-only vertical timeline.

*Sqlpp* (tool)
https://github.com/jamis/sqlpp
A simplistic SQL parser and pretty-printer.

Read
----------------------------------------------------
From the blogosphere or news feeds ...

*What's new in Ruby 2.3 Enumerable* (rb - jan 18)
https://rossta.net/blog/whats-new-in-ruby-2-3-enumerable.html
Two new Enumerable instance methods were added, grep_v and chunk_while.

*11 Ruby Tricks You Havenâ€™t Seen Before* (rb - jan 18)
http://www.blackbytes.info/2016/01/ruby-tricks/
Well, maybe you knew about some of them, but maybe there is some easter egg here.

*Implicit vs explicit type conversions in Ruby* (rb - jan 18)
http://zverok.github.io/blog/2016-01-18-implicit-vs-expicit.html
to_h/to_hash and others.

*Building a web framework from scratch in Elixir* (el - jan 18)
https://codewords.recurse.com/issues/five/building-a-web-framework-from-scratch-in-elixir
Using Plug directly to build our own framework from scratch.

*A Deep Dive into ES6 Classes* (js - jan 18)
http://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/
Inheritance, encapsulation, polymorphism and much more.

*Pointy Slider* (css3 - jan 18)
https://codyhouse.co/gem/pointy-slider/
Creating a slideshow with sliding-in panels that unveil new, fixed background images.

*Introducing Apex* (ops - jan 18)
https://medium.com/@tjholowaychuk/introducing-apex-800824ffaa70#.hfq1yrntk
Serverless architecture with AWS Lambda.

*Next generation configuration mgmt* (ops - jan 18)
https://ttboj.wordpress.com/2016/01/18/next-generation-configuration-mgmt/
A next generation configuration management prototype.

*Skinny controllers through refactoring* (rb - jan 19)
https://www.leighhalliday.com/skinny-controllers-through-refactoring
Controllers can get out of control. Their job should generally be quite simple.

*New Rails identity* (rb - jan 19)
http://weblog.rubyonrails.org/2016/1/19/new-rails-identity/
With Rails 5 just around the corner, we thought it was finally time for a fresh look for a new day.

*The Beginner's Guide to Crafting Ruby Gems* (rb - jan 19)
http://bamboolab.eu/blog/the-beginners-guide-to-crafting-ruby-gems
The simple steps of gems creation, in this example for a rails plugin.

*The Easiest Way to Add Authentication to Any App* (tool - jan 19)
https://scotch.io/tutorials/%E2%80%8Bthe-easiest-way-to-add-authentication-to-any-app
Don't feel like implementing authentication yourself? Try Auth0.

*Patch and Protect Linux Kernel Zero Day Vulnerability* (ops - jan 19)
http://www.cyberciti.biz/faq/linux-cve-2016-0728-0-day-local-privilege-escalation-vulnerability-fix/
CVE-2016-0728, A local privilege escalation vulnerability has existed since 2012.

*Trends in Ruby - analyzing rubygems stats for 2015* (rb - jan 20)
https://infinum.co/the-capsized-eight/articles/analyzing-rubygems-stats-v2015
Rubygems is the official package manager for Ruby and we decided to crunch up some stats for 2015 and see what's what.

*OAuth 2 All the Things with oPRO: Customization* (rb - jan 21)
http://www.sitepoint.com/oauth-2-all-the-things-with-opro-customization/
This is the third and the last part of this series of working with oPRO.

. . . . . . . . . . . . . . . . . . . . . . . . . .
Links curated by by mose (publisher), tysliu (editors), Nauman Tariq, xenor, hsatac, mickey, lincoln (contributors).
*|END:IF|*
*|IFNOT:CONTENT=Only Links|*

Rant
----------------------------------------------------
The random rant of the week by mose.

#### The future of under-engineering

Recently Marcelo told me, that's weird, how we do 10% research and
specification, 40% implementation and 50% debugging in this industry. I'm more
used to 70% research and specification, 20% implementation and 10% debugging.
He was working in the hardhware industry for a while, and just came to a
service-based company. This is actually a very interesting remark and it
reminded me when I was in my twenties when I was working as a construction
worker.

When I was young there was no internet and I had a 10 years break from
computers. I had to take stupid jobs like working on construction sites for
low wages. After that I went to art school and later on I worked on building
sets for business shows. I have been shocked by the gap between those 2
worlds. When building a house, there is so much time spent writing plans,
thinking things in advance. While in the show-business construction pattern,
it was mostly about improvisation and managing inflexible time constraints,
with one-time-use construction.

I feel there is the same gap in the software industry. Well it's not exactly
the same for sure, but the paradigm feels alike. In service software
production, SaaS or ISP businesses, we tend to under-engineer the production.
There are perfectly legitimate reasons for that, the life-cycle of a platform
of service is quick, volatile and the value is not in the software asset but
in the customer-user experience.

The Agile organization model reinforces this pattern, by providing a
substitute to the early specifications, in the form of user experiences
description. All this is fine and good. For a time. But with years passing we
can see so many occurrences of 'temporary' projects becoming indestructible
legacy monsters. It's like there was some kind of tipping point where the
development should shift from under-engineered to well-engineered but it's
rarely anticipated properly enough.

But it's pretty hard to address that kind of problem. Throwing away the early
instances is very costly, especially when the organization is shaped by a
fast-paced reactive production model. Introducing proper engineering at early
stages is also not a clever option, as the product has to adapt to the
service, which depends on a constant feedback loop with the users.

I have the feeling that there is something missing. Like an evolution of agile
that could include seeds of later engineering. Some way to make possible to
start fast, and evolve in a solid and slower model later on without crisis or
disruption. This is the perspective that I think was missing in [that
article][engineers] I cited on green ruby 145. But I don't know the answer to
that problem. I suspect it will emerge by itself in the few next years.

[engineers]:
http://www.businessinsider.com/why-computer-programmers-need-to-stop-calling-themselves-engineers-already-2015-11

*|END:IF|*

====================================================
EOF

Feel free to send us feedback or information at
news@greenruby.org

follow on Twitter @greenrubist
forward to a friend *|FORWARD|*
Subscribe *|LIST:SUBSCRIBE|*

Copyright (c) *|CURRENT_YEAR|* Mose
http://creativecommons.org/licenses/by-sa/3.0/
This publication is licensed under a
Creative Commons Attribution-ShareAlike 3.0 License




